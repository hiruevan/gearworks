WEBVTT

00:00:00.112 --> 00:00:03.073
Alright, we are now going to add a map

00:00:03.153 --> 00:00:06.113
that will let us customize our

00:00:06.113 --> 00:00:08.433
game worlds. A good

00:00:09.353 --> 00:00:11.233
uh test map, I've found,

00:00:11.633 --> 00:00:14.354
is just

00:00:14.434 --> 00:00:17.114
formatted like this with 9 and

00:00:17.114 --> 00:00:20.034
then 7. So we're going to use

00:00:20.034 --> 00:00:22.434
that for right now. I'll explain how to

00:00:22.434 --> 00:00:25.395
make your own worlds soon enough. Now,

00:00:25.475 --> 00:00:27.395
to implement this map, what we're going

00:00:27.395 --> 00:00:29.475
to do is We're going to come down here to

00:00:29.475 --> 00:00:31.675
where we're drawing the tiles. We're

00:00:31.675 --> 00:00:34.275
going to say, if x minus

00:00:34.355 --> 00:00:36.996
x off greater than or

00:00:36.996 --> 00:00:38.676
equal to 0,

00:00:40.756 --> 00:00:42.916
you'll see that that actually gets rid of

00:00:42.916 --> 00:00:45.076
everything less than 0,

00:00:45.916 --> 00:00:48.117
um which is to be expected.

00:00:49.557 --> 00:00:52.517
And rng not equals 10.

00:00:57.877 --> 00:01:00.838
Then we are going to try. This is

00:01:00.838 --> 00:01:03.678
a thing that makes it so that

00:01:03.678 --> 00:01:06.358
when you are programming,

00:01:06.678 --> 00:01:09.638
it ignores errors. And in this case,

00:01:09.838 --> 00:01:12.639
when the tile is blank, it will get

00:01:12.639 --> 00:01:14.839
an error. So we do need to use try here.

00:01:15.399 --> 00:01:18.279
So then we're going to take math.floor x

00:01:18.279 --> 00:01:20.839
minus x off divided by tile size,

00:01:21.719 --> 00:01:24.600
negative math.floor Y minus

00:01:24.760 --> 00:01:27.400
Y off minus 640, and that

00:01:27.400 --> 00:01:30.120
number is actually coming from righthere,

00:01:33.040 --> 00:01:35.001
uh divided by tile size again.

00:01:36.921 --> 00:01:39.561
That is going to get our RNG value.

00:01:39.961 --> 00:01:42.921
Then tries require a catch.

00:01:43.961 --> 00:01:45.882
That's what happens when it finds an

00:01:45.882 --> 00:01:48.522
error and we're just not going to do

00:01:48.522 --> 00:01:51.322
anything because that means

00:01:51.322 --> 00:01:53.962
there is no tile in that location. So

00:01:53.962 --> 00:01:55.082
we're going to leave it empty.

00:02:03.143 --> 00:02:04.903
Now, when we run this, we see our

00:02:04.903 --> 00:02:06.423
wonderful test scene appear.

00:02:08.583 --> 00:02:10.344
Now, there's no collisions with the

00:02:10.344 --> 00:02:12.584
player yet. We'll add that in the next

00:02:12.584 --> 00:02:15.304
video. But there are some annoying things

00:02:15.304 --> 00:02:16.984
that I am noticing with the camera that

00:02:16.984 --> 00:02:19.304
we can fix right now. So

00:02:19.944 --> 00:02:22.825
first, you'll notice that to

00:02:22.825 --> 00:02:25.805
the left, we can't actually do

00:02:25.805 --> 00:02:27.965
anything there. So we're going to just

00:02:27.965 --> 00:02:30.685
stop the camera from scrolling too far in

00:02:30.685 --> 00:02:32.446
that direction, since there's not going

00:02:32.446 --> 00:02:34.086
to ever be anything there anyway.

00:02:35.166 --> 00:02:38.046
So that's super simple. If xoff

00:02:38.046 --> 00:02:40.686
greater than zero, xoff equals zero.

00:02:43.486 --> 00:02:45.647
So let's run that just to test it.

00:02:46.927 --> 00:02:49.727
And oh, there's a weird

00:02:49.727 --> 00:02:52.407
shifting thing going on. That's actually

00:02:52.407 --> 00:02:55.047
a really simple fix. Order

00:02:55.047 --> 00:02:57.248
matters in programming. All we need to do

00:02:57.248 --> 00:02:59.648
is just move this down below the player

00:02:59.648 --> 00:03:01.408
movement, and now it's fixed.

00:03:06.048 --> 00:03:08.329
So just keep that in mind. Order matters

00:03:08.329 --> 00:03:10.489
when programming. Now, you'll also notice

00:03:10.489 --> 00:03:12.249
when the player jumps, the camera doesn't

00:03:12.249 --> 00:03:14.609
shift at all. If we do any vertical

00:03:14.609 --> 00:03:16.769
parkour, that will be an issue. So let's

00:03:16.849 --> 00:03:19.250
handle that right now. If PY

00:03:19.250 --> 00:03:21.650
plus Y off is

00:03:22.210 --> 00:03:25.090
less than 200, y off plus equals speed

00:03:25.090 --> 00:03:27.730
times 1.5, else if

00:03:27.730 --> 00:03:29.490
py plus y off.

00:03:29.881 --> 00:03:32.602
four-- is greater than 400 and

00:03:33.002 --> 00:03:35.962
y off not equals

00:03:36.122 --> 00:03:36.362
0.

00:03:39.653 --> 00:03:42.373
Then we are going to set y

00:03:42.373 --> 00:03:44.693
off minus equals

00:03:45.013 --> 00:03:47.813
speed times 1.5 again. This works

00:03:47.813 --> 00:03:49.933
very similar to our scrolling to the left

00:03:49.933 --> 00:03:52.494
and right. Then we're going to go if y

00:03:52.694 --> 00:03:55.294
off less than zero, y off equals

00:03:55.294 --> 00:03:57.454
zero. That's just going to prevent the

00:03:58.934 --> 00:04:01.734
y um offset from scrolling

00:04:01.734 --> 00:04:04.375
too far down. But now when we jump, we

00:04:04.375 --> 00:04:05.895
get a nice scroll up.

