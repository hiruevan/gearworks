WEBVTT

00:00:00.183 --> 00:00:01.903
All right. I've loaded up the starter

00:00:01.903 --> 00:00:04.383
project, which you can access just above

00:00:04.383 --> 00:00:06.423
this video. So I'll load that up too.

00:00:06.823 --> 00:00:08.664
Follow along. You'll see that when we

00:00:08.664 --> 00:00:10.904
click Run, it just displays the flower

00:00:10.904 --> 00:00:13.864
character. Now, it has

00:00:13.864 --> 00:00:16.024
all the animations, not just a single

00:00:16.024 --> 00:00:18.744
one. We want to have just a single

00:00:18.744 --> 00:00:21.145
character. The way we're going to do that

00:00:21.545 --> 00:00:22.505
is by cropping.

00:00:25.135 --> 00:00:27.295
You may be familiar with how cropping

00:00:27.295 --> 00:00:29.295
works. Essentially what we're doing is

00:00:29.295 --> 00:00:32.256
we're going to take this image and

00:00:32.256 --> 00:00:34.976
we're going to cut it

00:00:34.976 --> 00:00:37.696
into pieces. And now we just

00:00:37.696 --> 00:00:40.496
have a single character that we can

00:00:40.496 --> 00:00:42.337
move around and display on the screen.

00:00:42.817 --> 00:00:45.537
Then what we can do is we can move the

00:00:45.537 --> 00:00:48.417
cropped region. And if we do this

00:00:48.417 --> 00:00:50.657
fast enough and enough times, we can

00:00:50.657 --> 00:00:53.618
achieve animation like this.

00:00:54.498 --> 00:00:56.978
In this example, you can see now

00:00:57.218 --> 00:00:59.938
back to the project. This is how

00:01:00.658 --> 00:01:02.338
we do this. What we're going to do is

00:01:02.338 --> 00:01:04.179
we're going to add some more parameters.

00:01:04.339 --> 00:01:07.139
So this 0, 0, 128,

00:01:07.139 --> 00:01:09.939
128, that's

00:01:09.939 --> 00:01:12.339
going to cut out the first section

00:01:13.099 --> 00:01:16.020
of our character.

00:01:17.180 --> 00:01:20.020
If you remember cropping. That's

00:01:20.020 --> 00:01:21.740
essentially what we're doing. The

00:01:22.260 --> 00:01:24.940
0, 0 is the

00:01:25.140 --> 00:01:26.501
cropping location,

00:01:26.501 --> 00:01:29.461
128 is the size of the crop,

00:01:29.781 --> 00:01:31.301
and then the rest of that is the size of

00:01:31.301 --> 00:01:33.021
the image and the image's location.

00:01:35.141 --> 00:01:36.901
Now, we're going to start

00:01:37.301 --> 00:01:40.022
animating this. Let animation

00:01:40.022 --> 00:01:42.582
equal zero, let seed equal zero.

00:01:43.622 --> 00:01:45.622
Now, repeat forever,

00:01:46.742 --> 00:01:48.582
function forever,

00:01:51.463 --> 00:01:54.103
We're going to do an animation modulus.

00:01:54.503 --> 00:01:57.143
I'll explain that in a second. C++.

00:01:57.863 --> 00:02:00.584
If c mod 6

00:02:00.664 --> 00:02:03.224
equals 0, then

00:02:03.384 --> 00:02:04.344
animation++.

00:02:07.064 --> 00:02:10.024
Draw.background. Let's do

00:02:10.024 --> 00:02:12.345
light green. It's a nice grass color.

00:02:14.505 --> 00:02:16.105
Now, modulus.

00:02:16.745 --> 00:02:19.145
Modulus is a mathematical term that's

00:02:19.145 --> 00:02:21.985
like a clock. If you look at 11, if you

00:02:21.985 --> 00:02:24.026
were to add 2, you'd get 1.

00:02:25.706 --> 00:02:28.266
This is the idea of modulus. It

00:02:28.586 --> 00:02:31.466
loops in a circle every time you add 1.

00:02:32.626 --> 00:02:35.067
Uh In the case of programming, it starts

00:02:35.067 --> 00:02:36.747
at 0, though. So

00:02:37.627 --> 00:02:40.187
let spidx equal

00:02:42.667 --> 00:02:45.548
animation. modulus five

00:02:45.708 --> 00:02:48.588
because there's five images in

00:02:48.588 --> 00:02:50.828
the flower character. Now draw image

00:02:50.828 --> 00:02:53.228
flower character dot PNG.

00:02:54.668 --> 00:02:57.469
We're going to draw them 0 plus

00:02:57.469 --> 00:03:00.109
128 times SPIDX

00:03:00.749 --> 00:03:02.989
0, 128, 128,

00:03:03.549 --> 00:03:05.749
0, 0, 128, 128.

00:03:10.110 --> 00:03:13.070
Now we can delete that test image.

00:03:13.150 --> 00:03:16.110
And when we click Run, we see that

00:03:16.110 --> 00:03:18.591
it's now looping through everything in

00:03:18.591 --> 00:03:19.471
our animation.

00:03:21.791 --> 00:03:24.511
I can clean this up a little bit. So

00:03:26.031 --> 00:03:28.831
we can adjust the modulus slightly to

00:03:29.071 --> 00:03:31.392
get faster or slower animation.

00:03:31.872 --> 00:03:33.872
Basically, that's what it's basically

00:03:33.872 --> 00:03:35.752
just saying, wait this many frames before

00:03:35.752 --> 00:03:36.272
increasing.

